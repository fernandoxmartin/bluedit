// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id String @id @default(uuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  posts Post[]
  comments Comment[]
  post_votes Post_Vote[]
  subs Sub[]
  joined Joined_Subs[]

  @@unique([id, name])
}

model Sub {
  id String @id @default(uuid())
  name String @unique
  slug String @unique
  description String
  user User @relation(fields: [userId], references: [id])
  userId String
  posts Post[]
  members Joined_Subs[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, name, slug])
}

model Post {
  id String @id @default(uuid())
  title String
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  sub Sub @relation(fields: [subId], references: [id])
  subId String
  comments Comment[]
  post_votes Post_Vote[]
}

model Comment {
  id String @id @default(uuid())
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
}

model Post_Vote {
  id String @id @default(uuid())
  vote Boolean
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Joined_Subs {
  id String @id @default(uuid())
  join Boolean
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  sub Sub @relation(fields: [subId], references: [id], onDelete: Cascade)
  subId String
}